plugins {
    id 'groovy'
    id "com.gradle.plugin-publish" version "0.13.0"
    id "java-gradle-plugin"
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("${outputDir}/plugin-classpath.txt").text = (sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath).join('\n')
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    implementation 'commons-io:commons-io:2.8.0'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'com.github.jknack:handlebars:4.1.2'
    implementation "com.fasterxml.jackson.core:jackson-core:${rootProject.ext.jacksonVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${rootProject.ext.jacksonVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-scala_2.12:${rootProject.ext.jacksonVersion}"
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    implementation "io.swagger:swagger-jersey2-jaxrs:${rootProject.ext.swaggerVersion}"

    implementation "javax.ws.rs:javax.ws.rs-api:${rootProject.ext.javaxVersion}"
    implementation 'com.sun.jersey:jersey-server:1.19.4'
    implementation 'org.glassfish.jersey.core:jersey-server:3.0.1'
    implementation "org.springframework:spring-context:${rootProject.ext.springVersion}"
    implementation "org.springframework:spring-web:${rootProject.ext.springVersion}"

    testImplementation gradleTestKit()

    testImplementation project(':test-models')
    testImplementation project(':java-tests')
    testImplementation project(':kotlin-tests')
    testImplementation project(':scala-tests')
    testImplementation 'cglib:cglib-nodep:3.3.0'
    testImplementation 'org.objenesis:objenesis:3.1'
    testImplementation('org.spockframework:spock-core:1.3-groovy-2.4') {
        //We want to depend on the gradle version of groovy since this is a plugin
        exclude module: 'groovy-all'
    }

    testRuntime files(createClasspathManifest)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

test {
    if (System.properties['test.profile'] == 'integration') {
        include '**/*ITest*'
    } else if (System.properties['test.profile'] == 'unit') {
        exclude '**/*ITest*'
    }

    inputs.dir "$project.rootDir/externaltestdata"
    testLogging {
        events 'failed', 'passed', 'skipped'
        exceptionFormat 'full'
    }
    options {
        systemProperties(System.getProperties())
    }
}

gradlePlugin {
    plugins {
        swaggerPlugin {
            id = "com.github.wakingrufus.swagger"
            implementationClass = "com.benjaminsproule.swagger.gradleplugin.GradleSwaggerPlugin"
        }
    }
}

pluginBundle {
    website = 'https://github.com/wakingrufus/swagger-gradle-plugin'
    vcsUrl = 'https://github.com/wakingrufus/swagger-gradle-plugin'
    description = 'Plugin to create Swagger documentation using Gradle'
    tags = ['swagger', 'documentation']

    plugins {
        swaggerPlugin {
            displayName = 'Swagger Gradle Plugin'
            tags = ['swagger', 'documentation']
            version = project.version
        }
    }
}

